<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeuralNetwork</name>
    </assembly>
    <members>
        <member name="T:NeuralNetwork.ActivationFunction">
            <summary>
            Interface of the activation function of a neuron.
            </summary>
        </member>
        <member name="M:NeuralNetwork.ActivationFunction.Output(System.Single)">
            <summary>
            Compute function value
            </summary>
            <param name="x">x</param>
            <returns>f(x)</returns>
        </member>
        <member name="M:NeuralNetwork.ActivationFunction.OutputPrime(System.Single)">
            <summary>
            Compute the diff of the function
            </summary>
            <param name="x">x</param>
            <returns>f'(x)</returns>
        </member>
        <member name="T:NeuralNetwork.SigmoidActivationFunction">
            <summary>
            The sigmoid activation function
            </summary>
            <remarks>
            Here is the definition of the sigmoid activation function
            <code>
                           1
            f(x) = -----------------   beta > 0
                    1 + e^(-beta*x)
            
            f'(x) = beta * f(x) * ( 1 - f(x) )   
            </code>     
            </remarks>
        </member>
        <member name="F:NeuralNetwork.SigmoidActivationFunction.beta">
            <summary>
            The beta parameter of the sigmoid
            </summary>
        </member>
        <member name="M:NeuralNetwork.SigmoidActivationFunction.Output(System.Single)">
            <summary>
            <code>
                            1
            f(x) = -----------------   beta > 0
                    1 + e^(-beta*x)
            </code>
            </summary>
            <param name="x">x</param>
            <returns>f(x)</returns>
        </member>
        <member name="M:NeuralNetwork.SigmoidActivationFunction.OutputPrime(System.Single)">
            <summary>
            <code>
            f'(x) = beta * f(x) * ( 1 - f(x) )
            </code>
            </summary>
            <param name="x">x</param>
            <returns>f'(x)</returns>
        </member>
        <member name="P:NeuralNetwork.SigmoidActivationFunction.Beta">
            <summary>
            Get or set the beta parameter of the function
            ( beta must be positive )
            </summary>
        </member>
        <member name="P:NeuralNetwork.SigmoidActivationFunction.Name">
            <summary>
            Get the name of the activation function
            </summary>
        </member>
        <member name="T:NeuralNetwork.LinearActivationFunction">
            <summary>
            The linear activation function
            </summary>
            <remarks>
            <code>
                   |1            if x > 0.5/A
            f(x) = |A * x + 0.5  if 0.5/A > x > -0.5/A
                   |0            if -0.5/A > x
            
                        A > 0      
            </code>
            </remarks>
        </member>
        <member name="F:NeuralNetwork.LinearActivationFunction.a">
            <summary>
            The A parameter of the linear function
            </summary>
        </member>
        <member name="F:NeuralNetwork.LinearActivationFunction.threshold">
            <summary>
            Usefull to compute function value
            </summary>
        </member>
        <member name="M:NeuralNetwork.LinearActivationFunction.Output(System.Single)">
            <summary>
             Get the activation function value
            </summary>
            <param name="x">x</param>
            <returns>f(x)</returns>
        </member>
        <member name="M:NeuralNetwork.LinearActivationFunction.OutputPrime(System.Single)">
            <summary>
            Get the diff function value
            </summary>
            <param name="x">x</param>
            <returns>f'(x)</returns>
        </member>
        <member name="P:NeuralNetwork.LinearActivationFunction.A">
            <summary>
            Get or set the A parameter of the function
            ( A must be positive )
            </summary>
        </member>
        <member name="P:NeuralNetwork.LinearActivationFunction.Name">
            <summary>
            Get the name of the activation function
            </summary>
        </member>
        <member name="T:NeuralNetwork.HeavisideActivationFunction">
            <summary>
            The heaviside activation function
            </summary>
            <remarks>
            <code>
            f(x) = 0 if 0>x
            f(x) = 1 if x>0
            </code>   
            </remarks>
        </member>
        <member name="M:NeuralNetwork.HeavisideActivationFunction.Output(System.Single)">
            <summary>
             Get the heaviside function value
            </summary>
            <param name="x">x</param>
            <returns>f(x)</returns>
        </member>
        <member name="M:NeuralNetwork.HeavisideActivationFunction.OutputPrime(System.Single)">
            <summary>
            Get the derivative function value
            Simulate an impulse at origin...
            </summary>
            <param name="x">x</param>
            <returns>f'(x)</returns>
        </member>
        <member name="P:NeuralNetwork.HeavisideActivationFunction.Name">
            <summary>
            Get the name of the activation function
            </summary>
        </member>
        <member name="T:NeuralNetwork.GaussianActivationFunction">
            <summary>
            The gaussian activation function
            </summary>
            <remarks>
            <code>
            
                             1                -(x-mu)^2 / (2 * sigma^2)
            f(x)  =  -------------------- *  e
                     sqrt(2 * pi * sigma)
            
            f'(x)  =  y(x) * -2*K*(x - mu) 
            </code>
            To implement a more efficient computation :
            <code>
            C = 1/sqrt(2 * pi * sigma)
            K = 1/(2 * sigma^2)
            </code>
            </remarks>
        </member>
        <member name="F:NeuralNetwork.GaussianActivationFunction.sigma">
            <summary>
            The sigma parameter of the gaussian
            </summary>
        </member>
        <member name="F:NeuralNetwork.GaussianActivationFunction.mu">
            <summary>
            The mu parameter of the gaussian
            </summary>
        </member>
        <member name="F:NeuralNetwork.GaussianActivationFunction.C">
            <summary>
            C parameter (usfull for computing function value)
            </summary>
        </member>
        <member name="F:NeuralNetwork.GaussianActivationFunction.K">
            <summary>
            C parameter (usfull for computing function value)
            </summary>
        </member>
        <member name="M:NeuralNetwork.GaussianActivationFunction.computeCK">
            <summary>
            Compute C and K parameters from sigma
            </summary>
        </member>
        <member name="M:NeuralNetwork.GaussianActivationFunction.#ctor">
            <summary>
            GaussianActivationFunction constructor
            </summary>
        </member>
        <member name="M:NeuralNetwork.GaussianActivationFunction.Output(System.Single)">
            <summary>
            Compute the value of the gaussian function
            <param name="x">x</param>
            <returns>f(x)</returns>
            </summary>
        </member>
        <member name="M:NeuralNetwork.GaussianActivationFunction.OutputPrime(System.Single)">
            <summary>
            compute the derivative value of function
            </summary>
            <param name="x">x</param>
            <returns>f'(x)</returns>
        </member>
        <member name="P:NeuralNetwork.GaussianActivationFunction.Sigma">
            <summary>
            Get or set the sigma parameter of the function
            (sigma must be positive)
            </summary>
        </member>
        <member name="P:NeuralNetwork.GaussianActivationFunction.Mu">
            <summary>
            Get or set the mu parameter of the function
            </summary>
        </member>
        <member name="P:NeuralNetwork.GaussianActivationFunction.Name">
            <summary>
            Get the name of the activation function
            </summary>
        </member>
        <member name="T:NeuralNetwork.Layer">
            <summary>
            A layer of neurone in a neuronal network
            </summary>
            <remarks>
            <code>
                        / N1 ----->        OUTPUTS
            INPUTS ===> - N2 ----->  (1 output for each 
                        \ Ni ----->  neuron of the layer)
            </code>       
            Each neuron of the layer has the same number of
            inputs, this is the number of inputs of the layer
            itself.
            </remarks>
            
        </member>
        <member name="F:NeuralNetwork.Layer.nn">
            <summary>
            Number of neurons in the layer
            </summary>
        </member>
        <member name="F:NeuralNetwork.Layer.ni">
            <summary>
            Number of inputs of the layer
            </summary>
        </member>
        <member name="F:NeuralNetwork.Layer.neurons">
            <summary>
            Neurons of the layer
            </summary>
        </member>
        <member name="F:NeuralNetwork.Layer.output">
            <summary>
            Last output of the layer
            </summary>
        </member>
        <member name="M:NeuralNetwork.Layer.#ctor(System.Int32,System.Int32,NeuralNetwork.ActivationFunction)">
            <summary>
            Build a new Layer with neurons neurones. Every neuron 
            has "inputs" inputs and the activation function f.
            </summary>
            <param name="inputs">Number of inputs</param>
            <param name="neurons">Number of neurons</param>
            <param name="f">Activation function of each neuron</param>
        </member>
        <member name="M:NeuralNetwork.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Build a new Layer with neurons neurones. Every neuron 
            has "inputs" inputs and the sigmoid activation function.
            </summary>
            <param name="inputs">Number of inputs</param>
            <param name="neurons">Number of neurons</param>
        </member>
        <member name="M:NeuralNetwork.Layer.setActivationFunction(NeuralNetwork.ActivationFunction)">
            <summary>
            Set the activation function f to all neurons of the layer
            </summary>
            <param name="f">An activation function</param>
        </member>
        <member name="M:NeuralNetwork.Layer.randomizeWeight">
            <summary>
            Randomize all neurons weights
            </summary>
        </member>
        <member name="M:NeuralNetwork.Layer.randomizeThreshold">
            <summary>
            Randomize all neurons thresholds
            </summary>
        </member>
        <member name="M:NeuralNetwork.Layer.randomizeAll">
            <summary>
            Randomize all neurons threshold and weights
            </summary>
        </member>
        <member name="M:NeuralNetwork.Layer.setRandomizationInterval(System.Single,System.Single)">
            <summary>
            Set the randomization interval for all neurons
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
        </member>
        <member name="M:NeuralNetwork.Layer.Output(System.Single[])">
            <summary>
            Compute output of the layer.
            The output vector contains the output of each 
            neuron of the layer.
            </summary>
            <param name="input">input of the layer (size must be N_inputs)</param>
            <returns>the output vector (size = N_neurons)</returns>
        </member>
        <member name="P:NeuralNetwork.Layer.N_Neurons">
            <summary>
            Number of neurons in this layer
            </summary>
        </member>
        <member name="P:NeuralNetwork.Layer.N_Inputs">
            <summary>
            Number of inputs of this layer
            </summary>
        </member>
        <member name="P:NeuralNetwork.Layer.Item(System.Int32)">
            <summary>
            Indexer of layer's neurons
            </summary>
        </member>
        <member name="P:NeuralNetwork.Layer.Last_Output">
            <summary>
            Return last output vector of the layer
            </summary>
        </member>
        <member name="T:NeuralNetwork.LearningAlgorithm">
            <summary>
            The abstract class describing a learning
            algorithm for a neural network
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.nn">
            <summary>
            The neural network
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.ERROR_THRESHOLD">
            <summary>
            Under this threshold value, learning will be
            considered as complete
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.MAX_ITER">
            <summary>
            Max number of iteration to learn data
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.ins">
            <summary>
            Input matrix of data to learn
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.outs">
            <summary>
            output matrix of data to learn
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.iter">
            <summary>
            Number of learning iterations done
            </summary>
        </member>
        <member name="F:NeuralNetwork.LearningAlgorithm.error">
            <summary>
            Last sum of square errors computed
            </summary>
        </member>
        <member name="M:NeuralNetwork.LearningAlgorithm.#ctor(NeuralNetwork.NeuralNetwork)">
            <summary>
            Learning algorithm constructor
            </summary>
            <param name="n">The neural network to train</param>
        </member>
        <member name="M:NeuralNetwork.LearningAlgorithm.Learn(System.Single[][],System.Single[][])">
            <summary>
            To train the neuronal network on data.
            inputs[n] represents an input vector of 
            the neural network and expected_outputs[n]
            the expected ouput for this vector. 
            </summary>
            <param name="inputs">the input matrix</param>
            <param name="expected_outputs">the expected output matrix</param>
        </member>
        <member name="P:NeuralNetwork.LearningAlgorithm.N_Network">
            <summary>
            Get the neural network of the learning algorithm
            </summary>
        </member>
        <member name="P:NeuralNetwork.LearningAlgorithm.Error">
            <summary>
            Get the last square error
            </summary>
        </member>
        <member name="P:NeuralNetwork.LearningAlgorithm.ErrorTreshold">
            <summary>
            Get or set the maximum sum of square errors value ( >0)
            </summary>
        </member>
        <member name="P:NeuralNetwork.LearningAlgorithm.Iteration">
            <summary>
            Get the current number of learning iterations done
            </summary>
        </member>
        <member name="P:NeuralNetwork.LearningAlgorithm.MaxIteration">
            <summary>
            Get or set the maximum number of learning iterations.
            </summary>
        </member>
        <member name="T:NeuralNetwork.BackPropagationLearningAlgorithm">
            <summary>
            Implementation of stockastic gradient backpropagation
            learning algorithm
            </summary>
            <remarks>
            <code>
            
                                 PROPAGATION WAY IN NN
                               ------------------------->
            
                   o ----- Sj = f(WSj) ----> o ----- Si = f(WSi) ----> o
                 Neuron j                Neuron i                   Neuron k
               (layer L-1)               (layer L)                 (layer L+1)
            
            For the neuron i :
            -------------------
            W[i,j](n+1) = W[i,j](n) + alpha * Ai * Sj + gamma * ( W[i,j](n) - W[i,j](n-1) )
            T[i](n+1) = T[i](n) - alpha * Ai + gamma * ( T[i](n) - T[i](n-1) )
            
            	with :
            			Ai = f'(WSi) * (expected_output_i - si) for output layer
            			Ai = f'(WSi) * SUM( Ak * W[k,i] )       for others
            
            </code>
            NOTE : This is stockastic version of the algorithm because the error
            is back-propaged after every learning case. There is another version
            of this algorithm which works on global error.
            </remarks>
        </member>
        <member name="F:NeuralNetwork.BackPropagationLearningAlgorithm.alpha">
            <summary>
            the alpha parameter of the algorithm
            </summary>
        </member>
        <member name="F:NeuralNetwork.BackPropagationLearningAlgorithm.gamma">
            <summary>
            the gamma parameter of the algorithm
            </summary>
        </member>
        <member name="F:NeuralNetwork.BackPropagationLearningAlgorithm.e">
            <summary>
            The error vector
            </summary>
        </member>
        <member name="M:NeuralNetwork.BackPropagationLearningAlgorithm.#ctor(NeuralNetwork.NeuralNetwork)">
            <summary>
            Build a new BackPropagation learning algorithm instance
            with alpha = 0,5 and gamma = 0,3
            </summary>
            <param name="nn">The neural network to train</param>
        </member>
        <member name="M:NeuralNetwork.BackPropagationLearningAlgorithm.Learn(System.Single[][],System.Single[][])">
            <summary>
            To train the neuronal network on data.
            inputs[n] represents an input vector of 
            the neural network and expected_outputs[n]
            the expected ouput for this vector. 
            </summary>
            <param name="inputs">the input matrix</param>
            <param name="expected_outputs">the expected output matrix</param>
        </member>
        <member name="M:NeuralNetwork.BackPropagationLearningAlgorithm.ComputeA(System.Int32)">
            <summary>
            Compute the "A" parameter for each neuron
            of the network
            </summary>
            <param name="i">the index of the curent training data</param>
        </member>
        <member name="M:NeuralNetwork.BackPropagationLearningAlgorithm.setWeight(System.Int32)">
            <summary>
            Set new neron's weights
            </summary>
            <param name="i">the index of the curent training data</param>
        </member>
        <member name="P:NeuralNetwork.BackPropagationLearningAlgorithm.Alpha">
            <summary>
            get or set the alpha parameter of the algorithm
            between 0 and 1, must be >0
            </summary>
        </member>
        <member name="P:NeuralNetwork.BackPropagationLearningAlgorithm.Gamma">
            <summary>
            get or set the gamma parameter of the algorithm
            (Rumelhart coef)
            between 0 and 1.
            </summary>
        </member>
        <member name="T:NeuralNetwork.GeneticLearningAlgorithm">
             <summary>
             A genetic learning algorithm
             </summary>
             <remarks>
             This is an aplication of genetic algorithm to train neural networks.
             The population is made of GeneticNeuralNetwork instance which is a
             compact representation of neural network. A genetic neural network
             represent a set of weights and threshold for a particular neural network.
             
             Here is the main loop of the algorithm :
             <code>
            	  Create initial random population of POPULATION_SIZE neural networks
            	   -> Evaluate fitness function (square error on learning values)
            	  |   Select best neural networks
            	  |   Cross selected networks to make new generation
                -- apply mutation operator on new generation
            	  Until error > error_threshold  	   
             </code>
            </remarks>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.rand">
            <summary>
            The random number generator
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.POPULATION_SIZE">
            <summary>
            The population size
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.MUTATION_RATIO">
            <summary>
            The mutation ratio during crossover
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.MAX_MUTATION_AMP">
            <summary>
            Maximum mutation amplitude
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.SELECTION_RATIO">
            <summary>
            The ratio of population selected for crossover
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.population">
            <summary>
            The population of GeneticNeuralNetwork
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.CrossOver(System.Int32,System.Int32)">
            <summary>
            Define the crossover operator for 2 GeneticNeuralNetwork
            </summary>
            <param name="i1">index of mother in population</param>
            <param name="i2">index of father in population</param>
            <returns>the child</returns>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.makeNewGeneration">
            <summary>
            Compute the new generation
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.ComputeErrors">
            <summary>
            Computes square error for each GeneticNeuralNetwork in population
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.#ctor(NeuralNetwork.NeuralNetwork)">
            <summary>
            GeneticLearningAlgorithm constructor
            </summary>
            <param name="nn">The neural network to train</param>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.RandomizePopulation">
            <summary>
            Make a new random population
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.Learn(System.Single[][],System.Single[][])">
            <summary>
            To train the neuronal network on data.
            inputs[n] represents an input vector of 
            the neural network and expected_outputs[n]
            the expected ouput for this vector. 
            </summary>
            <param name="inputs">the input matrix</param>
            <param name="expected_outputs">the expected output matrix</param>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.PopulationSize">
            <summary>
            Get or set the population size
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.MutationRatio">
            <summary>
            Get or set the mutation ratio (between 0 and 100)
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.MaxMutationAmplitude">
            <summary>
            Get or set the maximum mutation amplitude
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.SelectionRatio">
            <summary>
            get or set the selection ratio
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.MutationValue">
            <summary>
            Get the random amplitude of a mutation
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.Mute">
            <summary>
            Get a bool with MUTATION_RATIO/100 probability to be true
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.RandSelectionIndex">
            <summary>
            Get a random selected neural network in the population
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.Muted_NeuralNetwork">
            <summary>
            get a muted GeneticNeuralNetwork from the neural network
            </summary>
        </member>
        <member name="T:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork">
            <summary>
            Representation of a neural network for the genetic algorithm
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.genes">
            <summary>
            The genes : all neurons weight and threshold
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.sq_err">
            <summary>
            The global square error of the neuron
            </summary>
        </member>
        <member name="F:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.nn">
            <summary>
            The neural network of the Genetic Neural Network
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.#ctor(NeuralNetwork.NeuralNetwork)">
            <summary>
            Build a new Genetic NeuralNetwork from the Neural Network given as parameter
            </summary>
            <param name="n">The neural network model</param>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.Init">
            <summary>
            Initialize Genetic network from Neural Network
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.setWeights">
            <summary>
            Set Genetic neural network weights to the real neural network
            </summary>
        </member>
        <member name="M:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.CompareTo(System.Object)">
            <summary>
            Compare 2 genetic neural network on their square error
            </summary>
            <param name="other">another neural network</param>
            <returns>the comparative value</returns>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.Item(System.Int32)">
            <summary>
            Get or set the genes value
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.Error">
            <summary>
            Get or set the square error of the Network
            </summary>
        </member>
        <member name="P:NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.N_Genes">
            <summary>
            Get the number of genes of the Genetic Neural Network
            </summary>
        </member>
        <member name="T:NeuralNetwork.NeuralNetwork">
            <summary>
            Implementation of artificial neural network
            </summary>  
            <remarks>
            <code>
            
            
                                   o
                                   o  o  o  
               INPUT VECTOR =====> o  o  o =====> OUTPUT VECTOR
                                   o  o  o  
                                   o
                                 NERON LAYERS
            
            </code> 
            Each neuron of the layer N-1 is conected to 
            every neuron of the layer N.
            At the begining the neural network needs to
            learn using couples (INPUT, EXPECTED OUTPUT)
            and a learnig algorithm.
            </remarks>
        </member>
        <member name="F:NeuralNetwork.NeuralNetwork.layers">
            <summary>
            Layers of neuron in the network
            </summary>
        </member>
        <member name="F:NeuralNetwork.NeuralNetwork.ni">
            <summary>
            Number of inputs of the network
            (number of inputs of the first layer)
            </summary>
        </member>
        <member name="F:NeuralNetwork.NeuralNetwork.la">
            <summary>
            Learning algorithm used by the network
            </summary>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[],NeuralNetwork.ActivationFunction,NeuralNetwork.LearningAlgorithm)">
            <summary>
            Create a new neural network
            with "inputs" inputs and size of "layers"
            layers of neurones.
            The layer i is made with layers_desc[i] neurones.
            The activation function of each neuron is set to n_act.
            The lerning algorithm is set to learn.
            </summary>
            <param name="inputs">Number of inputs of the network</param>
            <param name="layers_desc">Number of neurons for each layer of the network</param>
            <param name="n_act">Activation function for each neuron in the network</param>
            <param name="learn">Learning algorithm to be used by the neural network</param>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[],NeuralNetwork.ActivationFunction)">
            <summary>
            Create a new neural network
            with "inputs" inputs and size of "layers"
            layers of neurones.
            The layer i is made with layers_desc[i] neurones.
            The activation function of each neuron is set to n_act.
            The lerning algorithm is set to default (Back Propagation).
            </summary>
            <param name="inputs">Number of inputs of the network</param>
            <param name="layers_desc">Number of neurons for each layer of the network</param>
            <param name="n_act">Activation function for each neuron in the network</param>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[])">
            <summary>
            Create a new neural network
            with "inputs" inputs and size of "layers"
            layers of neurones.
            The layer i is made with layers_desc[i] neurones.
            The activation function of each neuron is set to default (Sigmoid with beta = 1).
            The lerning algorithm is set to default (Back Propagation).
            </summary>
            <param name="inputs">Number of inputs of the network</param>
            <param name="layers_desc">Number of neurons for each layer of the network</param>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.randomizeWeight">
            <summary>
            Randomize all neurones weights between -0.5 and 0.5
            </summary>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.randomizeThreshold">
            <summary>
            Randomize all neurones threholds between 0 and 1
            </summary>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.randomizeAll">
            <summary>
            Randomize all neurones threholds between 0 and 1
            and weights between -0.5 and 0.5
            </summary>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.setActivationFunction(NeuralNetwork.ActivationFunction)">
            <summary>
            Set an activation function to all neurons of the network
            </summary>
            <param name="f">An activation function</param>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.setRandomizationInterval(System.Single,System.Single)">
            <summary>
            Set the interval in which weights and threshold will be randomized
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.Output(System.Single[])">
            <summary>
            Compute the value for the specified input
            </summary>
            <param name="input">the input vector</param>
            <returns>the output vector of the neuronal network</returns>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.save(System.String)">
            <summary>
            Save the Neural Network in a binary formated file
            </summary>
            <param name="file">the target file path</param>
        </member>
        <member name="M:NeuralNetwork.NeuralNetwork.load(System.String)">
            <summary>
            Load a neural network from a binary formated file
            </summary>
            <param name="file">the neural network file file</param>
            <returns></returns>
        </member>
        <member name="P:NeuralNetwork.NeuralNetwork.N_Inputs">
            <summary>
            Get number of inputs of the network
            (network input vector size)
            </summary>
        </member>
        <member name="P:NeuralNetwork.NeuralNetwork.N_Outputs">
            <summary>
            Get number of output of the network
            (network output vector size)
            </summary>
        </member>
        <member name="P:NeuralNetwork.NeuralNetwork.N_Layers">
            <summary>
            Get number of inputs of the network
            (network input vector size)
            </summary>
        </member>
        <member name="P:NeuralNetwork.NeuralNetwork.LearningAlg">
            <summary>
            Get or set network learning algorithm
            </summary>
        </member>
        <member name="P:NeuralNetwork.NeuralNetwork.Item(System.Int32)">
            <summary>
            Get the n th Layer of the network 
            </summary>
        </member>
        <member name="T:NeuralNetwork.Neuron">
             <summary>
             Class representing an artificial neuron
             </summary>
             <remarks>
             <code>
              
              --------------> * W[0] \                              -----  
              --------------> * W[1] - + -------> -threshold -------| f | ---------> O
              --------------> * W[i] /                              -----
                 SYNAPSES      WEIGHT             THRESHOLD       ACTIVATION       OUTPUT
            
             </code>
            </remarks>
        </member>
        <member name="F:NeuralNetwork.Neuron.rand">
            <summary>
            Pseudo random number generator to initialize neuron weight
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.R_MIN">
            <summary>
            Minimum value for randomisation of weights and threshold
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.R_MAX">
            <summary>
            Maximum value for randomization of weights and threshold
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.w">
            <summary>
            Weight of every synapse
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.last_w">
            <summary>
            Last weight of every synapse
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.threshold">
            <summary>
            Threshold of the neuron
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.last_threshold">
            <summary>
            Last threshold of the neuron
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.f">
            <summary>
            Activation function of the neuron
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.o">
            <summary>
            Value of the last neuron ouput
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.ws">
            <summary>
            Last value of synapse sum minus threshold
            </summary>
        </member>
        <member name="F:NeuralNetwork.Neuron.a">
            <summary>
            Usefull for backpropagation algorithm
            </summary>
        </member>
        <member name="M:NeuralNetwork.Neuron.#ctor(System.Int32,NeuralNetwork.ActivationFunction)">
            <summary>
            Build a neurone with Ni inputs
            </summary>
            <param name="Ni">number of inputs</param>
            <param name="af">The activation function of the neuron</param>
        </member>
        <member name="M:NeuralNetwork.Neuron.#ctor(System.Int32)">
            <summary>
            Build a neurone with Ni inputs whith a default 
            activation function (SIGMOID)
            </summary>
            <param name="Ni">number of inputs</param>
        </member>
        <member name="M:NeuralNetwork.Neuron.randomizeWeight">
            <summary>
            Randomize Weight for each input between R_MIN and R_MAX
            </summary>
        </member>
        <member name="M:NeuralNetwork.Neuron.randomizeThreshold">
            <summary>
            Randomize the threshold (between R_MIN and R_MAX)
            </summary>
        </member>
        <member name="M:NeuralNetwork.Neuron.randomizeAll">
            <summary>
            Randomize the threshold and the weights
            </summary>
        </member>
        <member name="M:NeuralNetwork.Neuron.ComputeOutput(System.Single[])">
            <summary>
            Compute the output of the neurone
            </summary>
            <param name="input">The input vector</param>
            <returns>The output value of the neuron ( =f(ws) )</returns>
        </member>
        <member name="P:NeuralNetwork.Neuron.N_Inputs">
            <summary>
             Number of neuron inputs (synapses)
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Item(System.Int32)">
            <summary>
            Indexer of the neuron to get or set weight of synapses
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Threshold">
            <summary>
            To get or set the threshold value of the neuron
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Output">
            <summary>
            Get the last output of the neuron
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.OutputPrime">
            <summary>
            Get the last output prime of the neuron (f'(ws))
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.WS">
            <summary>
            Get the last sum of inputs
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.F">
            <summary>
            Get or set the neuron activation function
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.A">
            <summary>
            Get or set a value of the neuron
            (usefull for backpropagation learning algorithm)
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Last_Threshold">
            <summary>
            Get the last threshold value of the neuron
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Last_W">
            <summary>
            Get the last weights of the neuron
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Randomization_Min">
            <summary>
            Get or set the minimum value for randomisation of weights and threshold
            </summary>
        </member>
        <member name="P:NeuralNetwork.Neuron.Randomization_Max">
            <summary>
            Get or set the maximum value for randomization of weights and threshold
            </summary>
        </member>
    </members>
</doc>
